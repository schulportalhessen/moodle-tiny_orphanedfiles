{"version":3,"file":"orphanedfilesmanager.min.js","sources":["../src/orphanedfilesmanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Storage helper for the Moodle Tiny orphanedfiles plugin.\n *\n * @module     tiny_orphanedfiles/plugin\n * @copyright  2023 Andreas Siebel <andreas.siebel@schulportal.hessen.de>\n * @copyright  2023 Andreas Schenkel <andreas.schenkel@schulportal.hessen.de>\n * @author     2023 Andreas Siebel <andreas.siebel@schulportal.hessen.de>\n * @author     2023 Andreas Schenkel <andreas.schenkel@schulportal.hessen.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Options from \"./options\";\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {deleteDraftFiles, getAllDraftFiles} from \"./repository\";\n//import {getShowReferencecount} from \"./options\";\n\n/**\n * OrphanedfilesManager is created in main.js\n */\nexport default class OrphanedfilesManager {\n    constructor(params, editor) {\n        this.editor = editor;\n        this.elementId = editor.id;\n        this.editorContainer = editor.editorContainer;\n        // Read from options.js\n        this.draftItemId = params.draftItemId;\n        this.userContextId = params.userContextId; // user context from moodle\n        // Read websitesetting from options.js\n        this.showReferenceCountEnabled = params.showReferenceCountEnabled;\n        this.orphanedFilesCounterOnly = params.orphanedFilesCounterOnly;\n        this.wwwRoot = params.wwwRoot;\n        this.baseUrl = {};\n        this.allFilesSet = new Set(); // files\n        this.usedFilesSet = new Set(); // Set of file strings(!)\n        this.orphanedFilesSet = new Set(); // files\n        this.deletedFilesSet = new Set(); // files\n        this.oldOrphanedFilesSet = new Set();\n        this.changed = false;\n    }\n\n    /**\n     * Creates the wrapper for the Orphaned files area.\n     * The wrapper is a `div`-Element with id js-orphaned-wrapper-[elementid]\n     * and class js-orphaned-wrapper\n     */\n    createOrphanedArea() {\n        this.orphanedArea = document.createElement('div');\n        this.orphanedArea.id = 'tiny-js-orphaned-wrapper-' + this.elementId;\n        this.orphanedArea.className = 'tiny-orphaned-js-orphaned-wrapper';\n        this.orphanedArea.className = 'tiny-orphaned';\n        this.editorContainer.after(this.orphanedArea);\n\n        this.headerDiv = document.createElement('div');\n        this.headerDiv.id = `has-orphaned-files-${this.elementId}`;\n        this.headerDiv.classList.add(`hidden`);\n        this.headerDiv.innerHTML = '⟳ ... LOAD \"orphaned files indicator\", 8, 1';\n        this.orphanedArea.appendChild(this.headerDiv);\n\n        this.bodyDiv = document.createElement('div');\n        this.bodyDiv.id = `orphaned-files-${this.elementId}`;\n        // Template will be inserted into this DOM element.\n        this.bodyDiv.classList.add(`orphaned-files-content`);\n        this.bodyDiv.classList.add(`orphaned-files-content-${this.elementId}`);\n        this.bodyDiv.classList.add(`hidden`);\n        this.orphanedArea.appendChild(this.bodyDiv);\n\n    }\n\n    /**\n     * Updates the static allFilesSet\n     *\n     * @returns {*}\n     */\n    updateAllFiles() {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const draftItemId = Options.getDraftItemId(this.editor);\n                const fileObject = await getAllDraftFiles(draftItemId);\n                const result = JSON.parse(fileObject.files);\n                this.allFilesSet = new Set([...result]); // generate set from resultArray\n                resolve(result); // Erfolgreich aufgelöst\n            } catch (error) {\n                reject(error); // Bei einem Fehler abgelehnt\n            }\n        });\n    }\n\n    /**\n     * Returns the used Files as array\n     * Update used Files is called *after* UpdateAllFiles\n     *\n     * @returns {array}\n     */\n    updateUsedFiles() {\n        return new Promise(async (resolve) => {\n            const editorContent = this.editor.getContent();\n            const baseUrl = `${this.wwwRoot}/draftfile.php/${this.userContextId}/user/draft/${this.draftItemId}/`;\n            const pattern = new RegExp(\"[\\\"']\" + baseUrl.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') +\n                \"(?<filename>.+?)[\\\\?\\\"']\", 'gm');\n            //Get all used files in editor by searching editor content for filepatterns\n            const _usedFilesSet = new Set([...editorContent.matchAll(pattern)].map((match) => '/' +\n                decodeURIComponent(match.groups.filename)));\n            let i = 1;\n            // Get *files* from filename and filepath strings in editor (by filtering allFilesSet\n            for (const file of this.allFilesSet) {\n                file.className = 'file-' + i;\n                // Add individual information about the file e.g. dimensions, formated last modified date, ...\n                if (file.image_width && file.image_height ) {\n                    file.dimensions = `${file.image_width}✕${file.image_height}`;\n                } else {\n                    file.dimensions = '';\n                }\n                const newDate = new Date(file.datemodified * 1000);\n                const dateString = newDate.toLocaleString();\n                file.datemodified_formated = dateString;\n\n                if (_usedFilesSet.has(file.filepath + file.filename)) {\n                    this.usedFilesSet.add(file);\n                }\n                i = i + 1;\n            }\n            resolve(); // Erfolgreich aufgelöst\n        });\n    }\n\n    /**\n     * Compares to allFiles and usedFiles to find all orphaned files\n     *\n     * @returns {*[]}\n     */\n    updateOrphanedFiles() {\n        return new Promise((resolve) => {\n            this.oldOrphanedFilesSet = this.orphanedFilesSet;\n            this.orphanedFilesSet = new Set([...this.allFilesSet].filter(element => !this.usedFilesSet.has(element)));\n            // We think that in mostly all cases the sizes are different if we have to render the orphandfiles list.\n            // There might be some very few other cases.\n            // eg copy an image from the clipboard substituting an image in the editor and then perform an undo.\n            const setsareequal = this.orphanedFilesSet.size ===  this.oldOrphanedFilesSet.size;\n            if (!setsareequal) {\n                this.changed = true;\n            } else {\n                this.changed = false;\n            }\n            resolve();\n        });\n    }\n\n    /**\n     * Deletes the selected files.\n     *\n     * @param {array} files List of all selected files\n     */\n    deleteSelectedFiles(files) {\n        const draftItemId = Options.getDraftItemId(this.editor);\n        // call deleteDraftFiles from repository.js\n        deleteDraftFiles(draftItemId, files).then(() => {\n            // Mark deleted files and render body.\n            for (const file of files) {\n                // ToDo: Why do we need deletedFilesSet??????????\n                this.deletedFilesSet.add(this._get_file_identifier(file));\n            }\n            this.update();\n        });\n    }\n\n    /**\n     * Updates static usedFiles and orphanedFiles and call to renderBody if orphanedFiles list changes\n     *\n     * @returns {null}\n     */\n    update() {\n        this.updateAllFiles().then(() => {\n            return this.updateUsedFiles();\n        }).then(() => {\n            return this.updateOrphanedFiles();\n        }).then(() => {\n            if (!this.changed) {\n            } else {\n                // Only render Body if orphaned files changed\n                this.bodyDiv.classList.remove('hidden');\n                this.renderBody();\n            }\n        });\n        this.changed = false;\n    }\n\n    /**\n     * Renders the list of orphaned files or in case of orphanedfilescounteronly renders just the number of orhaned files\n     *\n     * @returns {null}\n     */\n    renderBody() {\n        const numberoforphanedfiles = this.orphanedFilesSet.size;\n        if (numberoforphanedfiles !== 0) {\n            var orphanedfilescounteronly = this.orphanedFilesCounterOnly;\n            if (orphanedfilescounteronly) {\n                const context = {\n                    // Data to be rendered\n                    numberoforphanedfiles: numberoforphanedfiles,\n                };\n                Templates.renderForPromise('tiny_orphanedfiles/orphanedfilescounteronly', context).then(({html, js}) => {\n                    Templates.replaceNodeContents(`.orphaned-files-content-${this.elementId}`, html, js);\n                });\n            } else {\n                const websitesettings = Array();\n                // Just for documentation purpose: We can access settings by two different ways.\n                // We can access Options-Object or the data stored during construction.\n                websitesettings['showreferencecountenabled'] = this.showReferenceCountEnabled;\n                websitesettings['orphanedfilescounteronly'] = this.orphanedFilesCounterOnly;\n                const context = {\n                    // Data to be rendered\n                    orphanedFiles: Array.from(this.orphanedFilesSet),\n                    numberoforphanedfiles: numberoforphanedfiles,\n                    websitesettings: websitesettings,\n                };\n                // Display Orphaned-Files-Table\n                Templates.renderForPromise('tiny_orphanedfiles/orphanedfiles', context).then(({html, js}) => {\n                    Templates.replaceNodeContents(`.orphaned-files-content-${this.elementId}`, html, js);\n                }).then(() => {\n                    // Add Listener to dynamic items in Orphaned-Files-Table e.g. Delete Buttons\n                    return this.registerListener(Array.from(this.orphanedFilesSet));\n                }).catch((error) => displayException(error));\n            }\n        } else {\n            // In case of an undo the numberoforphanedfiles might get 0 during a table with orphand file is visible.\n            // To be cheap in this case we do NOT remove the table but set table like in all other cases where\n            // numberoforphanedfiles = 0 to hidden.\n            this.bodyDiv.classList.add('hidden');\n        }\n        return null;\n    }\n\n    /**\n     * Get the file identifier with the correct draftidemid tha is used by the editor.\n     *\n     * @param {array} file The file we need the unique fileidentifier from.\n     * @returns {string}\n     * @private\n     */\n    _get_file_identifier(file) {\n        const draftItemId = Options.getDraftItemId(this.editor);\n        return draftItemId + '-' + file['filepath'] + '-' + file['filename'];\n    }\n\n    /**\n     * Add Listener to dynamic items in Orphaned-Files-Table e.g. Delete Buttons\n     * @param {array} files The list of files which are display in Orphaned Files Table.\n     */\n    registerListener(files) {\n        // Add listener to the trash icons to be able to delete one single file.\n        files.forEach((file) => {\n            const deleteButton = document.querySelector(`#orphaned-files-${this.elementId} .orphaned-row.${file.className} span`);\n            deleteButton.addEventListener(\"click\", () => {\n                const singleFile = [];\n                singleFile.push({'filepath': file.filepath, 'filename': file.filename});\n                // We can use deleteSelectedFiles() to delete a single file triggered by the trash icon click.\n                this.deleteSelectedFiles(singleFile);\n            });\n        });\n\n        // Add listener to the delete button to look for each selected file that will be deleted.\n        let selectedFiles = [];\n        const deleteSelectedButton = document.querySelector(`#orphaned-files-${this.elementId} button.deleteselected`);\n        deleteSelectedButton.addEventListener(\"click\", () => {\n            for (const file of files) {\n                const select = document.querySelector(`#orphaned-files-${this.elementId} .orphaned-row.${file.className} input`);\n                if (select.checked) {\n                    selectedFiles.push({'filepath': file.filepath, 'filename': file.filename});\n                }\n            }\n            this.deleteSelectedFiles(selectedFiles);\n        });\n    }\n\n}\n"],"names":["constructor","params","editor","elementId","id","editorContainer","draftItemId","userContextId","showReferenceCountEnabled","orphanedFilesCounterOnly","wwwRoot","baseUrl","allFilesSet","Set","usedFilesSet","orphanedFilesSet","deletedFilesSet","oldOrphanedFilesSet","changed","createOrphanedArea","orphanedArea","document","createElement","this","className","after","headerDiv","classList","add","innerHTML","appendChild","bodyDiv","updateAllFiles","Promise","async","resolve","reject","Options","getDraftItemId","fileObject","result","JSON","parse","files","error","updateUsedFiles","editorContent","getContent","pattern","RegExp","replace","_usedFilesSet","matchAll","map","match","decodeURIComponent","groups","filename","i","file","image_width","image_height","dimensions","dateString","Date","datemodified","toLocaleString","datemodified_formated","has","filepath","updateOrphanedFiles","filter","element","setsareequal","size","deleteSelectedFiles","then","_get_file_identifier","update","remove","renderBody","numberoforphanedfiles","context","renderForPromise","_ref","html","js","replaceNodeContents","websitesettings","Array","orphanedFiles","from","_ref2","registerListener","catch","forEach","querySelector","addEventListener","singleFile","push","selectedFiles","checked"],"mappings":"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"}